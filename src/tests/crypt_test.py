import unittest
from src.crypt import Crypt

class TestCrypt(unittest.TestCase):
    def setUp(self):
        self.crypt = Crypt()
        self.private_key = (59991223314036227864103898334420920341302788766379149242078352396448848446541115225267485475174364270513300770431749186690142211394437971455062652098275571782053568415336097647433990207539737593087182929549937868200186533248541240717471133426949616132974470945643680881251539051116517015103169367127836835949, 5978343217784924610227238964586463078094031057772284720081995201202487590282741406170895030873609915783791863095499548930731018853732615035369549733033822942252570678069995450812400462799983666275982020042166961404238617763676301821465331341944756060824150373697743974725790946855252170072888747481640089941)
        self.public_key = (59991223314036227864103898334420920341302788766379149242078352396448848446541115225267485475174364270513300770431749186690142211394437971455062652098275571782053568415336097647433990207539737593087182929549937868200186533248541240717471133426949616132974470945643680881251539051116517015103169367127836835949, 65537)
    
    def test_str_conversion_to_int_works(self):
        result = self.crypt.str_to_int("This is a test")
        self.assertIsInstance(result, int)

    def test_encrypted_message_is_not_plaintext(self):
        plaintext = """Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu, 
        consequat vitae, eleifend ac, enim. Aliquam lorem ante, dapibus in, viverra quis, feugiat a, tellus. 
        Phasellus viverra nulla ut metus varius laoreet. Quisque rutrum. Aenean imperdiet."""
        int_ptext = self.crypt.str_to_int(plaintext)
        cipher = self.crypt.encrypt_message(plaintext, self.public_key)
        ciphertext = cipher[0]
        self.assertNotEqual(ciphertext, int_ptext)

    def test_message_decrypted_right_priv_key_match_original_plaintext(self):
        plaintext = """alkuluku12alkuluku12alkuluku12alkuluku12alkuluku12alkuluku12alkuluku
        12alkuluku12alkuluku12alkuluk"""
        cipher = self.crypt.encrypt_message(plaintext, self.public_key)
        decrypted_message = self.crypt.decrypt_message(cipher, self.private_key)
        self.assertEqual(plaintext, decrypted_message)

    def test_message_encryption_returns_encrypted_msg_and_size(self):
        plaintext_list = ['与䂃쎛흐杶꺘岑ꗥ䌶\u1afa섟䌿粖㑈횯嫇Ș쀓뽥쎄鋢褖䯇뛾Є̍杀쐻轋ড\u169e꺧慕아텇뛶ꆅᐚᲵ謨◵䚅Ꭺ⩿꺇砠慟洈ᕫ⬆\u09b5ᴄ˳蓞碮狍캟ໂ౸ݗꪷ䩨ࣜ⨵깮䅨쩓㿺풪종鞶颻鰬䑛郇⥞ჾ꧊賒훔惶ស謞ഺ誓쓨휜ꂎ桿鲈㠠ꓗ棝畣⒫볲먔漁䥈睝⪟Წ틶盀舤淼趄',
        '傷韁뾆뫉鈀筣孱剏䮖珐\u1774䙒權쵼െ汛蘚␛黖髡㎮ྕ씞᱿䟋쒊芆敞㧒흗뀯尟ᬙ珗陏鷅魋厏㐲댚\x13ᴉ怕賱',
        '粧堃瀧쟛돂턣㏳㶥撾㷽ꁰ皝䝹돳꧐孶鈊썩饑箉蒂슮膇啧䂑夁왜랫ᐓ尢쇐⒍龶膖帩䞉탅ꏑ敥徬纛옼善昧ퟠ⬾쐧❱☥煬呎⍢ㆵ㴄ଁ',
        'Ꞥꗃݚ\uaaf8ㅆ쁘⻞텕爞扟碡좾憨㒏鶎ቚ瘹⒨贬숯邛㙏㿂녷涼蟅첰먺ふˉ꼘㇅皐ᅨ帍麅哹㉁㌀朳馵㯄╾\u0a0dᬤ䌶䃱刈鞷ꛦ᷵랤墼墸骜暭㿛呔鰫〃㙀⫂熬ܳꡔ맆솖뙎ކ䐢쫱枽옻\u175b饶凂圴퀢軞\u2dcfㄺ튄⑦冐娕ꄯᄉ뀂펾뽴ṇ틩궣锦',
        'ᶶ㣁㛉砈漅碖딍䰘⫁咟࿔孃ͷ麦蕰ژ藪朸㯭䒅ꅞ黶욱镢ྵᜐ\u2067责ᙊ侞꼪๛穇㞂澀橦뫗凊鲼ꃁჯ嵤㬛ᾴ⅁ɿ둣棄疱咋謊ꢠǈ绯ᮚ⍕̅娢谨䛯\u1af7琊戦坁截靻☏ꕻⳬ㪐ፎ粜\uab0f苼垟嘥쐏댖癯斑㏅⎾ꄙꌑ딶퇍쀪䷇ᲂ埆궁ៀ莪齱礣ꍨ䐲렴篸',
        '馃ᄖ꾮様쓰㙈ꌇ넶舊츨❼ⲓ緛찊姠ᬶ稕ຟ庱涼㌑黛뜯▜ꉦꈾ噓啂\u31ea렢☧⌊筶옅圵랸㛽ջ낉ङ쑞˶䇵ᥢژ흃䞑ଢ⠁捐ꓡ鏬⭹僈긠',
        '頦稲鯽亴붇⎡쇗꛰㹩㬬⫟텯룕㳲䣇㭏䲻煼닕鯑퍲ꇨ龡戀㻻驸ᵥ⠕么툌ɭා齛磰ꑗම쁤㾻ꋣ㯣硷栭籣榥㫟簠饠䘏鱶鳃稩嵈詑㸌⧆䍣퐁',
        '퓻꺅槾솺资퀂惔얊㿂㽞╯皬茿扮ꋋ䙯紾濌꒶仆ꬄ웬彆粣蹨छ苽뀐츪쿴咳멡朇폺⥀覷겊㎀羔ꌨᓋ駏秃睑緮贂롪읮擆魧痨캀ெ⻭貒敷ᬒ玶戺ꐬ',
        'ᥠ葦퐝\u086b㙢Ⱈ䗣詵ӻ똳袤ꄽ帽퇅폳ْꓖ⅑䌢䒈犋麥仑挍큚崔≪⦸틦៙碢鈤䀻鶝克䘯蓶磩맜쭣佲孧₢㢮솮൷ᕓ龹喓䢄ꭳ命ⷲ躉璛ⵦყͅⷙ잨䤡妻簑貭똱㈆ҋ贻ꚢ戨쇠瀊œຈ蛬ď鳬軗攓埤隗毕弪ꣅ⧰況뙻㖱ꓤ氣澀蛕⣅䣭ᒨ스㭿뻇⇰濉—㗣❎퓆㴛굙併佢',
        '⻄ກ퇅䐾饠㏘눀峪尗랜枔ꅋ엺挫䚶馘弦抧ፕ\uaafb쨫늄垸쑤켗݅⽜壮퐿重㥹ᛂ',
        '⼬䊦늢휵漠翼\u0b5e爞㪨䠔퐔䱒ꦋ⤘⠅爬儽蒭䞕퀑艐뇖ۧ喼븥͇瓵䱂팁䉘줘\u0c74釨\u0eed嶶혰糀稟歏횩⩌ᯞ泇澴呀暜棖ᱵㅭ刏〷ⶒᾖ⎭㺅鍓툊㇗㕎귊皸掁⇤',
        'ᙘ竹Փ꩙╼웘덐ᦑ驧틇㊟㟑덽࿕ੳ흼瓯週漱粀瀬珿跴銔樶൪✙䈅쫦⏯豇㻭桹䱩㰱\ua8ca駨擩ৌ勫ᛚ睒ꆁ䙳㪭鳡뱺䢠懳漜≻≾쟩傦鯦Ỳ转ˎ덨乕ᎈ믋䅔묌䇢↲ᑃ˔與',
        '蟳䛊宯曭䌑䋊\u07bd폵ᝏ誼擭ꉒ텐埙썠ࣺʉ̖麋ꋶ匣\ua9ce껇䷀鎺ㅪ䀴㠍ꠣ퀁뷪ɺ靸炶䔤规ꏘ䅐醡쬆⍩謙⼅Ѳ蚫ꍓԁ',
        '刺뜩럄鋄峽䫠ᖩ\x83䅻㵆\u175b窻쩹ꣶ㨯⒳붦屵鷪㘹ˊ୪㟎눹\u05f6\uaa3aꗰʏ嫦蟺䎭ꚶ⏢뎕窞삶错Ș䛁칲ꌶ䞙⸚븺ꈜ뷇痁ᤗ',
        '矚軵勡鴊贰ⲟ뗆齲ꮹ⋅れ택쯇컸窓챋㭿ꏐ괘柮Ȿ㔋⁕蜈츆醹嘱൶ꁸꜺ䆝쿞麑駸袄㦧밮ጁɾ渽귇ज़믜蟦㨌ꐏ㙝륣倗뉞䏇硫ೡ텗⢽漆爘ប聩䇐ᑸᥘ㌤뮳괿苣\uabff돸✔⬫疒夺ⲁ❭ᩜվ',
        '䇌웢㹱綖좴푐\u2e61鎌峬碭앉劐䠕霼⊸\u0bce桽ᧅ쯠趂ƙ扄逭鳡掿闓鼆⥣㌸옪䘯謠킜봑⣚䯋俧ቴྼ駔ᡄ쿮淹ᛱ㝰ㅸ퇐쭗ꄶ蛻ᷴ혙ꝧ쇑ڷ㝦ث갲ꕑⲘ뚦\uaafb㢎쏤扼',
        '浩쑞鴄䑕淯缷≦瘥ꪜ犸㬡̟磏냾㮧ᰛ℧嚰⟎은띿㲎韼╤骅鈁ᆹ飽틶濒ף蟲䬿셹뺎⨁垺驅螅汁ఱ꘣粰ᝥ䘈퀁踢砈樃鈖涘죚掚겠㮔祟귃䭤ㆫ䬦줜颯ⶸ邿⁎왪嶫⒡莒⸪숝手腲綼입텰ໄ₮ꨌੴ㐳蕮ퟻ叔㽘뇈આ墠ㄢ넭媂',
        '讑㧍縁蜳ᒴ씹轋漺䰺層汓骛麺봓㾵둖ӱЛさ㧂ṡ叠Ùꗝɚ蝽쵋会Њᩳ㘵⇧넮휽阣夤ᵥ旧봯癜⡲ᩳ킕㌷濙눐舲༜礎쬑滶턱ꗞࡋ灢뇡䗰䩌ꛐ孕肏깡阬ꏡߐ眽艉䐎\u08ce',
        '䡹䢶䖼\ua63e콽糟なア㬥춶ꮢ젯ᓻ赶驂㪶슸桷ꊿ푉䯃擐痆뽵滔쭇⌽瞵鶠꾨肤駢侙쾿웒蜃ꦔຍی\u9ffa딿澗ز奦먕⠭䫓盠抣ፃ֯⽱鞝椑\u0b97ㄾ⼑玅棬蝬眹犺౪즷脽똍氣꾾锚䱊ꜙខ듛糓ᴋꞙ夶洝蠘苉瞺ꀼ湺媰긷荥഻ᤳၓޫ܌쾌㴕Ҷ飧䷘檇빲둦ᭈ\u2fe6\u1f1f邑ⓥ坋嚝ɹ봠᳙饊',
        '꽶縖✘ⓓⵇ畐배䈠笃倫脀䍕뙫m忓㐶㢹딑ᮀ쒚饠멃갋돻뵒⢯㈺䖗钞\u0c72齬솛締슛ꯐ贀ꈘ脈㙻䒡',
        '巭픱祼⩈注╰뼁㘒끄⦝ⰰ愼릳껌矪餕⡾㜋츄ⱼꞃ笄黥溜紘춍䱛枻저\u2e6cɶ㠏̽狁囔즯ᥴ҉착荷蝊책ƚ긿㖥⭅兣穵커㶃䋣燰偁瘌ꇓ䫦욈\x11㧥불瘭뇶鏡ꃮᕎᕲ찻嵧쿳쁕럢硣变㶔湀驠纒ᚃ稀㘝\u1774畎鲺ꧢ╞혽ꊃ䝜㓡됗핮ၹ俹쵾隱㴌␅虐⏊蛾対墍秚䑺덈',
        'ꋠ៌追칛버䶕묁騦ṡ逆颀㿇哨龢훡쾂⳿\u2061⁷鏁㏎詞ᮕᮅ籶ꔯ髏䂝绵᧪惞㴗镘\u1af8\u0eed╣黽茲ᒔ萄䜹癠䕴뿧邟͙䥉㛚冂ᛌ\u19dd⩔⽣䂻岈⻔혞愊ꌫ쓘䤤䎘ɝ溈蹘⼬䖜促勤㾕臝駿襔峦ӗ瘆捃챟ຈᏖⳍߛ\ua87d찕',
        '貶뿚㞧絠㽷䅶넙됣鲚豭䞬̕謕嘝꽪艟滀輄纲㏘墇饰Ḩ䴞䥉ᶆ㠆⩳쵘ᗐ艊Ꝿ\u187b溉ឨ槌竼㲒⾓䨮ࠬ創캄뱉陰㊢\u175d罪騿㱝\uaa38ჷ䮼퀮䮴鰫၁븡ᶿ꠸㚣署꾁੶ఊ즒嘤Ǹ蘣殀煥ଇࣣ嗼䢂앩됁喪㼽뷧셷',
        '㫁묧殆㉫Ћᙋ헟륳캦㻓毝욙퓶㏗낆鹋巌頉ḧ죗瓕ᇿꞢ淉鈬덯禎퇦㵐晛⤷䤮匠뵲Ⲩଭ촜岍ⶴ⣏薐♠淈폠习衎\u1cc8켖栃柺샸唧頨컚鷃얪┭◶᙭⟞扔\u171d繌⮉億ᱱ⭇လピ븁䰀\u1af2砤\u4db6媗쿳颽ꡇ棄肾᷽鋦䟞⫨넭䋁铃핱蕦䯷㿥氕習ᆘ\u0bc9풝ਏ菈쀥뉢蔷헵궛돿\uaa4f',
        'Ҭ춝澣曱槄ᨐṣ⟨曚꺕뒏膗݆\u0ebf삓ᔜ꣨쭫㭇랈퇶釹팞扁㼈⨸ያ앇왾㼟㸋壚Ѡ墕ᢀ⪀凾\uaa3c䖟∇ᙹ␠ㅿ⚃薴杍阤䚕亊蔶걿酔\u1c38̶鰔㋖\u2b96쵍軱杄᨞갩텲綒菲眙ꂿ✶켥匾Ý㖳큩ⴰᙝ䕑\u1a9e㻪떒ᐐۊ퐬뒳憑檥熋旴펠㾙엽咂ꑆ踋ꖛ咹ጣ浇낋',
        '䥼췀讓ద臶綽쟿Ꙑ噟댄ᛗ銾촲좚ḱ闹澞鹦ᖁ渎꽋㭃鱖祼潵ꖲ䋳珅〄걾씦겺結谡시\u0e3c퉷䃄껅綷뉿辱䖑僮恚膚邨돂늅씪ȃ紼꩘⑾긩¤蕮늧蓼㭨ǚ巉䬵㫄炷\u0892辦喼谰汈堔硡溜칄俪뜿퓱\u0dd7ނ暒㺇꤈輠뺖䛯䃉ረ㯶ზĀ秷ᇥꥠ㯇䗵埔붊笳檩喫ᙁ蟳䧄㬿ⲭ㵄軚洵鳖쟼댊긔厥',
        '妈籛镣⪭돇䖝죜㸤듄揭녗鈛䶢㿹ⵠꏬᢙꈧ⮪혼ᇌ\u0382휭皣稯做檔䦸䙑줼볦渓៎⒜䗯Ⳓߞᱤ⮌梪ጡ瓴鏞勉喌홯꺈푞⊔⛑燚柕ͽ诱玼쯌캨ꞇ퉨ᳱ㣫烍糖ေ롕旨ⱗ駉佔晖䔈ણ秽ꊙ懈川᰻鵖ꭃᤥ紊픯⩐滁薥藌뿫ᡈ桖ꢝ垑ἆ',
        '⩁ɪ\u087c劉銎ľ㗛녆থ㞗饹ᵅ샧玉⻖㼃뀑滼\u0b49돢傮ᓾⶆ릮䧶횢헶뤝뵵궄亐俨Ἴ暨䳣츗鴱濶箑ኾ鶔씠ᛞꀗꮈ♷ᡫ思쿋㷵ꏇ멹댓娿럩赥쮰勾쫞ᙓ㊡푃婶琓㡴堵ࠊ䧇誨蠮氬䡠䳴愾ꑩ壱啔졣ꏱ봗꧷ꭑቹ⽖ᜦ㿇뱘㰚坁\u2003쨔褎녳濺뿿䒲쌣듚炼琚氒᳟簇⎛翛勭≈쾧ꞿࡈ튡닄',
        '쐽㵜΄朼㩌樷똴둴ᒜ犌꾀ꜱ礦⧦樨寑齙傅\u1f7eᘟ㦍ᩱ廥ⱁ桳氛䂇ᘢ↛蚸山캻迲蚄앤ꔔ帤䎀Ἕ쿍ᒩ\x90螮쁸ꡈ쁚舗᷊ꓷ沞䯕⺺蕻센ܡ鋡슨礞捧▊才䘀垰⢭퍋⑷ʪ◄ह筢㗆Ộ릳곱薍죛砇ꃵ歉싶俪밀쌢霂㑋뎨촇䍑\u2ffe嶕䅈域賍絤⥯盄',
        '燮峊鉳⃛෫姨≤蝒余녶龈ᄼⓑᅵ侗崤赤战뱶깸藃ற퓒ኻ釀픯怄낪够㢹룳礀佬朹커鷑龕㫚鰾ⅷꙬᘞ偹皘聮鸂윅謧ᘈ亗\u20fb읡鬡ꚳꖦാ黷͒熷泠髳䛉鷩紂膖띟푎̽휓蟅\ua7e4ᓾ栓ꈯħ청阬丁꣭\u202fꂪ쌪辍㴍焯',
        '藶⤯\u1aef뎞ᄣ㼪ၦ윣蕙跴땕迱⽑㰡꙼ճᶖ欏ح끔滎㑩羽猞뚺騴ꁑৰ刢Ქ뉢影ꆼ⮱ཥ㗿㒸⼣釁䱁芬돹鸗爦ᗑꞨኼ黠蝜څ⧂瑕졗悍ꕾ恺뤖藴梈溮ᡎ礇낺⠟涀蝰猂ꐏꀪߴ槯馜㘷꼳ꀺ篷㤿䳛蠺젠⹅騫箬⾼勑浮쎰㱽韬擯娪鎜퓜搓ꮔ鴚ᱤ싫',
        '℗倆\u20fe왙臽ꮅ봥鬈肰ⒶA鴔抮ᶋ픤捆氇푲ꭅ㐌쬐ꨠ銪\u082e賃\u1afe謒㌉棘ǲ菨뇬僛ᡋ橉濌㤇ॄ巀櫪\ua7f2뚼捐熉饙簣攜秘⅔豉',
        'Ξ鲶閍\u09b5烤匊纂ۅ跠淓낧芪⩆ℳ⨫푘縦掺轞깐竛魟ꁙ⦼䢂⑤⵿Ǆ쨑猎啄몮⇯ꉈ뫍耙䢪봨䟷洳蛮꽣ꤹ옋衸遞쀗䩰둊㾡짢⮀쿤톥⍷᭓湝ジ㿿떾뛡ᴸ䨂\ua7e5䵇Ꚕ䣕埖᱒ꎲ脱먘컲幑䓿逵≎ε任⁇쾞㋫躘㫕䳘ᭊঠ絧㢝ⅹ㳐ቑ駍뱴⧷믾딯㘂ꏸ譜⭡긽䌂洐耷僨썵',
        '椡顴༭킺⮤䩃喠퐍\u244d뭠ማ쭛췡⠶㳿碅鋎툻奿乾㼩鶹Å䛉묨ꎄ炂죷尷\u0e7e粒扵㬅᪖ښꢗ螻᪁ᚾꮻพꠉ뾆⤻㴋',
        '瞨颚䕛ۃ餯蒥㠞䂋嫺븩ꬣ⋝辱쭢뻱䛯筤앩됪ⴼ䬝뉪苬ꠦ괉똗㿔붯뉄⭱衤⧳䉽ꇛ䟮ᢗ㺼䄃\u0c8dރ㍶佳͵ઋ謩䤿⟣ᕘ쇰ൈ눴℘뉳홮┌걦ۊ≿ᇒ硂紁瑘⨘쒓ోị襟엒嫤✖葦퐄ʨ롲렵惈ꄍ⽶亖䰤直䍇ḡ좫峂ᢶ啲宦쨮䄴륮洝梺끌굡⧻⽼闞ꂆ⩒赵쌻۠ቪ',
        '홍䌾酻봛穹烕千뾰鬇쌺竳䭪枝꽈銯爂봀邩⒔毀ᯬ蕗撒匞㖲㏙锫ὖ⫠쒴⬸䁭說不뿵씵鏤萸違硒湼ᴣ䃐ꗷ砑侚᪗뉄ᲷÌ肳䭫瑘詙䉘긑찵窦现ᤏ嫪瑬㱩⭾鞗킍鍕㑼䠷붦젣콞殎䒝豁繦ꥺ൧☲梆䋲ᒨ',
        'ᐲ犟뷞秒ĺ쳰篽쬂噦ᖥ曍젻♹鍣ᵩ啘劷쫽暄RꙠ䎾圅趲삥粴鞕ࢪ風\u18f6ᚶ䡸ꯖ킞垃ᩍ誮⼫鰢拜',
        '\u0895䁡俍翼ㄹ뢝箘་㦩ꖫ끋镲醚崻庸ὸᚄ᧗滏⾂쬬퇤쑏䮫왊༲ꗵ灢➽ꄺ呶䛘䟽ᓤ爳遾藌볆殊롸鞜쳚',
        '蝄ꅫဌ୷֝던㧓樣ꋕ\u20f1ᨛ秉湪ꉼ䮡䠡熗땧烆ꅙ猰⊲趠躄୴笔灥샸痻紻ེ붭최娴苒䖅䈌쑆ᄁ븛鱄逩㤓氭醼䭝㯙窷莎愳漭铕徺Ď趠\u20cc뜻ቡ栓㟋Ⳕ菇ࠕ꒫虺㒀锑䉚軠㧴濦燉膘',
        '៝덳紞䇽틷쿼胀н仼노⠏\u0fdbṳ䉭Ⲳ쾉ᵧ以႕쾰Д㢺뾿ᶬ嵍乆돓ퟱ튺ᔟ⻜鲔镼凓냐\x0b湌峄뫋艜\ua95b詚蹵睦䷲㽪块ႚ䮓짮쨖퇍ᶪö䲽旨鸕Ĝ惧폧玡ᰯ粭⯪䖐䈬꤄覾쇥곶ⰵ㿖贸რ鮬慉잝艜⢭霫䞰瑱㑀虉신쉌浍뎣㿾酿ඟ꾛亊듅퍗搢ꚙ窚㴗⎀嚛悀䛠㠊늂ㅨ䃰倴ϊ灻〧㞰ಁ䎡',
        '믨垾搎䛁峷抢惶\u0c45纗ꐒ甄铄ϓⱋ锞참刱䠣樭鞌峭삒㊢哗渌讔쭅鮆鉐髁轣좿ꦃ牳ꦦℨ⤻酳ఌ䉖봮謑籾豌翮謬',
        '稠鶩츊⸝췕ᮛび춙딣괯煉旧㫧샰龆ⱎꒅ㐝幮ᶨꫴ燤ꒋ灛ꫭ鉣梫ꘚள譽㷑秲㾺䋡ꖜ峳\u085f☦ኻ沌먁䅌쎑ꎎ孨㏵좇屋㇅ⱗ䅤늨ힸᏝ壙ἇ↙板䓺ㅍ悯㫇鎝퉟랲檇諪뗉ꂨ喢卾┠頇⸂뵑ቅ䝊⽺',
        'Ӈꨴ渱쁍㦄䥎\u2fef䋪ǆ깋馅鲫哪έ僚ᛆℵጺ챓㜟⬴饏絇㬖矕饐㳭᠋悭╗ⱱ삍粚䘙坴ፃᏔ貞휲拔㯽鞖\u1f7eⳗ\ua6f8締ম䌞Ȑ聰㌙㴴慡ꡑц\u0df9裾ؤ矊ꉓᴇǢ⤄븨㝀㓻倓\ua7e5瘷⑻쁓帤ЛⰙ猹ᩴꁱꂉಋ䧴ᕏ즙頁ꕝⶥ캜쉍諷夋㪽纤즻꛱寥刱\u12bf텏鈤縙ᙵ밨璹',
        '뤜泒퐊䪬랰察筏垭䟜ɇ➫᧿䬞拃燙㾾諜馽ꆩ퍆∸徆⵰碀蹢屏몴ᐝṦ삟핦헰\u0bce\u3101㽬䦧宥ힲৎ᯼䉵䨲劣፟밽鸍恩殄쇤댯뜓쓟䏘䇉ࡦ媂ㆮ늁䕴푔簜鄳Ჭ쾴㎺幒ᆃ툻忓곃到朻⇙愋ᏼ땧ओ',
        '⺂쒣㴱吋㕕慐恰蠺뭽䐙龰嗼建ᤵ巛\u169d혖犽뛹䉊㠛ᓅủ\u0aba盯規邭翝湻ࠖ\u18fa䁪๊蛚㇘괓톱矝ꨚ賵삇꺒㵵ꭈ쥝耵曠鶒茦ꌾ鰧㦆υ嵓嬱㪩첚㓢四윿캯懁꧙ᵒ㰕밹㦏铷ぜ힂騜ꍳ銰乬碷Ɓ鎕ᚘ뛣ែ⣰‧甄跹푗砚\u0e62쩈寬䬁ퟳۘ济൨仸\u31ec聊ẑᤪ웠풡뎐铷겂싼錡䍭',
        '풳㙰绸\u05ec矖䋬璢凯픋뉊䮜勅穷ᘈ붡䨣㍶⸭倩䠶ꆾ薳ະ≧峙꽃悽攬娫ꇜꢏ襖⽪\ua7db셽ꀆ▓◱⠾잹捁ܝ唪鳰珺\u0c76孒薩\uab1a꼌곞낋溯똘ᠾ巃컱뾌坃鉞컻꼤夜⭇⇌ᆀ塔퇕㥺࿏쇗佯륧鋪骧䲔籬욎耯⎣諔螌城铏虙볼ទꖘᗜ秾菶噃饏狫᮹櫆謧评厚₰\u09bbₘ苸綫ີ埌糊뼒ᮡ駄鮹ு彷䞅',
        '牌急ꔹ춙袆근껯뮎ꂬ跼੍㦱㋀骖蝧쇓벣袘큣䚙鱙⥂ȕ퀦쁔⥦웈쇃굔懪磡欆죘鄾ᩞ舽⬂鉏陸㗨᳸옶댞宊藝链锋ꑘ⯹䫅䐀孻鯓乵価⼅뛞引块ୗ뵽ꋌ䑕䉪끀ǧ㸉ᣈ䫥嚻\u0efcሖ抝첊眠齔諨鈩̓轱퉕ඟ넃慊朻㮩\u1680ᰉ檯ꖘ质ᭁ脔ⷼ❧ఙ᧑╳ᬹꪂ㇘镀緫讣⺇쳡熄郂ꫪ췱甬ꏀ刴繦筦',
        '⍗냘磄嬾⎷뤝缼ぺ溻⦪㧒掴╰젶頇쩟ߞよ࠰㲮듕簭脲灜辨咸꾽푛썜桘䙟ט툌鋸荨穛ꦖᰬ逈',
        '윹퇒멯虗Ⅸ귶\u0ef2邷ꉪ䈴坺郫旼쒡龘뒰뜑哇\u0530እ⚆蕖涗▞鳥ᕣ᪉庚睓㜽慔箹匃ꤕს홚䣮滲䐝偎꿅쎍碔ꁦꥊ芲妣㉐浽缧痰䂎捧㙫䶵윦䪛䟪Ṵ츄瓨㨿瞮၁馡И顈別써铡峬町ꎋ薜ᵐᨬկ현䰧沄伧ᾀ腐⯍⡸⑯졤\u1af0䖧燤䔀趠떪싺蜢窴쉞侻玞뙸ꙃ엕帅냫ꏬᝉᨹ䑢᳃ᕚ렇劲玒셙뉃',
        'ᾘḱ큐뇟搆숡뼻㿺ᦉ억鿪喼睻窛쯜⺴ỳᢴƸ쨶丩ๆ講灱鴰≛옴搧葇碂ퟄ諀⚇鷒\ua87c퐾湏襳갔\u0efb┉䚱휪餅乖㙜뼹ᲇ䚓겶랢ⰼ冺馂鰳๏蓯䰏ᢼ鬞Ỵ륬ꝇ淘ᝩ보镙觤荄Ⴋ豈笱ủ즰ⷭⷅ攙']
        
        for msg in plaintext_list:
            cipher = self.crypt.encrypt_message(msg, self.public_key)
            self.assertIsNotNone(cipher)

    def test_message_decrypted_wrong_private_key_not_matching_original(self):
        plaintext = """alkuluku12alkuluku12alkuluku12alkuluku12alkuluku12alkuluku12alkuluku
        12alkuluku12alkuluku12"""
        cipher = self.crypt.encrypt_message(plaintext, self.public_key)

        self.wrong_private_key = (self.private_key[0]-1, self.private_key[1])
        decrypted_message = self.crypt.decrypt_message(cipher, self.wrong_private_key)
        self.assertNotEqual(plaintext, decrypted_message)
